<style>
    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 100%;
        height: 20%;
        word-wrap: break-word;
    }

        .card:hover {
            box-shadow: 0 16px 32px 0 rgba(0,0,0,0.2);
            cursor: pointer;
        }

    .cardContainer {
        padding: 10px 16px;
    }


    #myBtn {
        display: none;
        position: fixed;
        bottom: 20px;
        right: 30px;
        z-index: 99;
        border: none;
        outline: none;
        background-color: deepskyblue;
        color: white;
        cursor: pointer;
        padding: 15px;
        border-radius: 50%;
    }

        #myBtn:hover {
            background-color: #555;
        }
</style>

@model IEnumerable<VisionMelbourneV3.Models.UserPlan>
@{
    /**/
    ViewBag.Title = "My Day Planner";
    var planDate = "";
    string start = "";
    string destinationLocation = "";
    var displayDate = "";
    int plansCount = 1;
    var plans = Model.ToList();
}

@*jumbotron display plan date and start location*@

@foreach (var item in Model)
{
    planDate = item.Date.ToString();
    start = item.StartLocation;
    var month = item.Date.ToString("MMMM");
    displayDate = item.Date.DayOfWeek + "," + item.Date.Day + " " + month;

}
<div style="text-align: center; vertical-align: middle; font-family: Verdana;
color: Blue; position: absolute; top: 50%; left: 50%; margin-left: -88px;
font-size: small;" id="dvProgress" runat="server">
    Please Wait ...
</div>
<body onload="initMap()" style="padding:5px;">
    @*<div class="jumbotron">
        <div class="row">
            @Html.Label(displayDate)
        </div>
        <div class="row">
            Starting from: @Html.Label(start)
        </div>
    </div>*@

    @using (Html.BeginForm("NewPlan", "UserPlans"))
    {
        //Creating a new plan
       <div class="section large transparent dark text-center"> 
        <div class="inner">
           <div class="row">
            <form>
                <div class="col-sm-12">
                    <div class="searchform" style="text-align:left">
                        <label for="CLocation">Enter your planned destination</label>
                        <input id="autocomplete" type="text" name="location" placeholder="Add a Location" required onfocus="this.placeholder=''" onblur="this.placeholder ='Please search your start location'" />
                        <input hidden id="lat" type="text" name="lat" />
                        <input hidden id="lon" type="text" name="lon" />
                        <input hidden type="text" name="plandate" value=@planDate />
                        @Html.Hidden("fromlocation", start)
                    </div> <!-- end .form-group -->
                </div> <!-- end .col-sm-4 -->
                <div class="col-sm-12">
                    <div class="searchform" style="text-align:left">
                        <label for="FLocation">Pick a time: </label>
                        <input id="Date" type="datetime" name="time" placeholder="Pick a time" required class="form-control" />
                    </div> <!-- end .form-group -->
                </div> <!-- end .col-sm-4 -->
                <div class="col-sm-12">
                    <div class="form-group">
                        <input type="submit" value="Add Place" class="btn btn-default" />
                    </div>
                </div>
            </form>
        </div>
            </div>
           </div>
        @*<div class="row">
            <div class="form-group">
                <div class="col-md-3">
                    @Html.Label("Enter a plan location: ")
                </div>
                <div class="col-md-9">
                    <input id="autocomplete" type="text" name="location" placeholder="Add a Location" required onfocus="this.placeholder=''" onblur="this.placeholder ='Please search your start location'" />
                    <input hidden id="lat" type="text" name="lat" />
                    <input hidden id="lon" type="text" name="lon" />
                    <input hidden type="text" name="plandate" value=@planDate />
                    @Html.Hidden("fromlocation", start)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.Label("Pick a time: ")
                </div>
                <div class="col-md-9">
                    <input id="Date" type="datetime" name="time" placeholder="Pick a time" required class="form-control" />
                </div>
            </div>

            <div class="form-group">
                <div style="text-align:center;">
                    <input type="submit" value="Add Place" class="btn btn-default" />
                </div>
            </div>
        </div>*@

    }
    <hr />


    @foreach (var userPlan in Model)
    {
        if (userPlan.Location != null)
        {
            destinationLocation = userPlan.Location;
            int pedcount = Convert.ToInt32(userPlan.PeopleCount);
            TimeSpan time = (TimeSpan)userPlan.Time;
            var travtime = time.ToString(@"hh\:mm");
            var locationID = "location" + plansCount;
            var timeID = "time" + plansCount;
            var peopleCountID = "pedcount" + plansCount;

            <div class="card">
                <div class="cardContainer">
                    <div class="row">
                        <div class="col-md-8"><p><i class="glyphicon glyphicon-map-marker"></i><div id=@locationID>@Html.DisplayFor(modelItem => userPlan.Location)</div></p></div>
                        @if (time.Hours >= 12)

                        {<div id=@timeID hidden>@Html.DisplayFor(modelItem => userPlan.Time)</div>
                        <div class="col-md-4"><p><b>Time : @Html.Label(time.ToString(@"hh\:mm"))pm</b></p></div> }
                    else
                    { <div class="col-md-4"><p id=@timeID><b>Time : @Html.Label(time.ToString(@"hh\:mm"))am</b></p></div>}
                        <div class="col-md-4">
                            <a id=@plansCount class="btn btn-warning" onclick="doTTS(this)">
                                Speak
                                <span class="glyphicon glyphicon-volume-up" aria-hidden="true"></span>
                            </a>
                        </div>
                    </div>
                    <hr />
                    <div class=" row">
                        <div class="col-md-4">
                            <p><b>Pedestrian Traffic</b></p>
                            @if (pedcount == 0)
                            {
                                <div class="row cardContainer">
                                    <i class="glyphicon glyphicon-ban-circle"></i>
                                    <p>Sorry no info found!</p>
                                    <p id=@peopleCountID hidden>Sorry, no pedestrian traffic info found at your planned location!</p>

                                </div>

                            }
                            @if (pedcount <= 200 && pedcount > 0)
                            {
                                <div class="row cardContainer">
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <p>Free Street!</p>
                                    <p id=@peopleCountID hidden>The Streets are usually free at this time!</p>

                                </div>

                            }

                            @if (pedcount <= 400 && pedcount > 200)
                            {
                                <div class="row cardContainer">
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <p>Busy street!</p>
                                    <p id=@peopleCountID hidden>The Streets are usually Busy at this time!</p>
                                </div>
                            }
                            @if (pedcount > 400)
                            {
                                <div class="row cardContainer">
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <i class="glyphicon glyphicon-user"></i> <i class="glyphicon glyphicon-user"></i>
                                    <p>Crowder Than Usual!</p>
                                    <p id=@peopleCountID hidden>The Streets are usually Crowded at this time!</p>

                                </div>
                            }
                        </div>
                        @using (Html.BeginForm())
                        {
                            <div class="col-md-offset-8">
                                @*<div class="col-md-3">
                                       <a href="#" class="btn btn-primary" onclick="EditPlan(@userPlan.Id)">Edit <i class="glyphicon glyphicon-edit"></i></a>
                                    </div>*@
                                <div class="col-md-3">
                                    <a href="@Url.Action("Delete", "UserPlans",new { id = userPlan.Id })" class="btn btn-danger">
                                        Delete
                                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                    </a>
                                </div>
                                <div class="col-md-3">
                                    <a href="@Url.Action("NearbyPlaces", "UserPlans",
                                            new { planstart = start, nearlocation = destinationLocation, date = planDate, locLat = userPlan.Latitude, locLng = userPlan.Longitude , planTime = userPlan.Time})"
                                       class="btn btn-primary">
                                        Explore nearby
                                        <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <br />
        }
        plansCount++;
    }
</body>
@*Time picker for new plan*@
<script type="text/javascript">
    $(function () {
        $('#Date').datetimepicker({
            format: 'HH:mm'
        });
    });

    $(document).ready(function () {
        $("div[id$=dvProgress]").fadeOut("fast");
    });
</script>

<script>
    var options = {
        componentRestrictions: { country: "au" }
    };

    var input = document.getElementById('autocomplete');
    var autocomplete = new google.maps.places.Autocomplete(input, options);
    autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        document.getElementById('lat').value = place.geometry.location.lat();
        document.getElementById('lon').value = place.geometry.location.lng();
    });

    function codeAddress() {
        var place = autocomplete.getPlace();
        document.getElementById('lat').value = place.geometry.location.lat();
        document.getElementById('lon').value = place.geometry.location.lng();

    }

    function doTTS(element) {
        document.getElementById(element.id).onclick = function () {
            var plocation = "location" + element.id;
            var ptime = "time" + element.id;
            var ppcount = "pedcount" + element.id;
            var speaktime = document.getElementById(ptime).innerHTML;
            var text = "At " + speaktime + ", You have planned to travel to " + document.getElementById(plocation).innerHTML
                + ", " + document.getElementById(ppcount).innerHTML;
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.pitch = 1.5;
            utterance.volume = 1.5;
            utterance.rate = 1;
            speechSynthesis.speak(utterance);
        }
    }

    //var EditPlan = function (planID) {
    //    var url = "/UserPlans/EditPlan?Id=" + planID;
    //    $("#ModalBody").load(url, function () {
    //        $("#myModal").modal("show");
    //    })
    //}
</script>

<script>
    var map;
    var geocoder;
    var currentLat;
    var currentLong;
    var start;
    var end;
    var tactileCoords = [];
    var directionsService;
    var directionsDisplay;
    var stepDisplay;
    var markerArray = [];

    function initMap() {
        directionsService = new google.maps.DirectionsService();
        directionsDisplay = new google.maps.DirectionsRenderer();
        geocoder = new google.maps.Geocoder();
        getCurrentLocation();
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 14,
            center: new google.maps.LatLng(currentLat, currentLong),
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                position: google.maps.ControlPosition.BOTTOM_CENTER
            },
            zoomControl: true,
            zoomControlOptions: {
                position: google.maps.ControlPosition.LEFT_CENTER
            },
            scaleControl: true,
            streetViewControl: true,
            streetViewControlOptions: {
                position: google.maps.ControlPosition.LEFT_BOTTOM
            },
            fullscreenControl: true,
            fullscreenControlOptions: {
                position: google.maps.ControlPosition.RIGHT_BOTTOM
            }
        });
        directionsDisplay.setMap(map);

        stepDisplay = new google.maps.InfoWindow();
    }

    function getCurrentLocation() {
        var options = {
            enableHighAccuracy: true,
            timeout: 5000,
            maximumAge: 0
        };

        function success(pos) {
            var currentLocation = pos.coords;
            currentLat = currentLocation.latitude;
            currentLong = currentLocation.longitude;
        }

        function error(err) {
            console.warn(`ERROR(${err.code}): ${err.message}`);
        }

        navigator.geolocation.getCurrentPosition(success, error, options);
    }

    //geocoding function
    function codeAddress() {
        initMap();
        start = "";
        end = null;
        var startAddress = document.getElementById('startAddress').value;

        geocoder.geocode({ 'address': startAddress + ',Melbourne' }, function (results, status) {
            if (status === 'OK') {
                map.setCenter(results[0].geometry.location);
                markerArray[0] = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
                start = results[0].geometry.location;
            } else {
                getCurrentLocation();
                start = new google.maps.LatLng(currentLat, currentLong);
            }
        });
        var address = document.getElementById('address').value;
        geocoder.geocode({ 'address': address + ',Melbourne' }, function (results, status) {
            if (status === 'OK') {
                map.setCenter(results[0].geometry.location);
                markerArray[0] = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
                end = results[0].geometry.location;
                calcRoute();
            } else {
                alert('Please enter a Destination!');
            }
        });
    }

    //directions function
    function calcRoute() {
        for (i = 0; i < markerArray.length; i++) {
            markerArray[i].setMap(null);
        }
        var request = {
            origin: start,
            destination: end,
            travelMode: 'WALKING',
            region: 'AU'
        };
        directionsService.route(request, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response);
                showSteps(response);
            }
        });
    }

    //rounding function for the geo coordinates
    function round(value, decimals) {
        return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
    }

    //Show route navigation function
    function showSteps(directionResult) {
        var isWaypoint = 0;
        var tadvisor = document.getElementById('TactileAdvisor');
        // For each step, place a marker, and add the text to the marker's
        // info window. Also attach the marker to an array so we
        // can keep track of it and remove it when calculating new
        // routes.

        var myRoute = directionResult.routes[0].legs[0];

        for (var i = 0; i < myRoute.steps.length; i++) {
            //check route for tactile grounds
            for (j = 0; j < tactileCoords.length; j++) {
                if (round(myRoute.steps[i].start_point.lat(), 3) === round(tactileCoords[j].lat(), 3) &&
                    round(myRoute.steps[i].start_point.lng(), 3) === round(tactileCoords[j].lng(), 3)) {
                    tadvisor.innerHTML = '<span><h3 style="background-color: #7FFF00;">Your route includes tactile surfaces!</h3></span>';
                    isWaypoint = 1;
                }
            }
            //Plot waypoints
            var marker = new google.maps.Marker({
                position: myRoute.steps[i].start_point,
                map: map
            });
            attachInstructionText(marker, myRoute.steps[i].instructions);
            markerArray[i] = marker;
        }
        if (isWaypoint === 0) {
            tadvisor.innerHTML = '<span><h3 style="background-color: #e50000;">Our database could not find any tactile surfaces in your route!</h3></span>';
        }
    }

    function attachInstructionText(marker, text) {
        google.maps.event.addListener(marker, 'click', function () {
            stepDisplay.setContent(text);
            stepDisplay.open(map, marker);
        });
    }

    $.ajax({
        url: "https://data.melbourne.vic.gov.au/resource/s3kn-ciyb.json",
        type: "GET",
        data: {
            "$limit": 5000,
            "$$app_token": "m5zAxv4nRKXpqpGjptErnXQXC"
        }
    }).done(function (data) {
        initMap();
        for (var i = 0; i < data.length; i++) {
            var coords = data[i].location.coordinates;
            var latlng = new google.maps.LatLng(coords[1], coords[0]);
            //var marker = new google.maps.Marker({
            //    position: latlng,
            //    map: map
            //});
            tactileCoords.push(latlng);
        }
    });

</script>



