@model IEnumerable<VisionMelbourneV3.Models.Location>
@{
    ViewBag.Title = "Nearby Places";
    string startLocation = ViewBag.planstartLocation;
    string nearlocation = ViewBag.findnearLocation;
    string latitude = ViewBag.latitude;
    string longitude = ViewBag.longitude;
    string Date = ViewBag.planDate;
    string Time = ViewBag.Time;
    DateTime dDate = Convert.ToDateTime(Date);
    string displayDate = dDate.Date.DayOfWeek + "," + dDate.Date.Day + " " + dDate.Date.ToString("MMMM") + ' ' + dDate.Date.ToString("yyyy");
}

<link href="~/Content/Site.css" rel="stylesheet" />
<link href="~/Content/style.css" rel="stylesheet" />


<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>

<script>
    var selectedValue = "church";
    var radius = 1;
    var destination = [];
    var latitude = [];
    var longitude = [];
    var map;
    var infowindow;
    var selectedTypes = [];
    var typeid = 1;

    function changeFunc() {
        //get the selected option
        var selectBox = document.getElementById("typeholder");
        selectedValue = selectBox.options[selectBox.selectedIndex].value;
        //set the typeid to get the corresponding image
        switch (selectedValue) {
            case "church": typeid = 1; break;
            case "cafe": typeid = 2; break;
            case "park": typeid = 3; break;
            case "museum": typeid = 4; break;
            case "train_station": typeid = 5; break;
            case "zoo": typeid = 6; break;
            case "shopping_mall": typeid = 7; break;
            default: typeid = 1; break;
        }
        var radselectBox = document.getElementById("radius");
        radius = radselectBox.options[radselectBox.selectedIndex].value;
        renderMap(selectedValue);
    }


    function initialize() {
        //set the center of the map at userdefined location
        var center = new google.maps.LatLng(@latitude, @longitude);

        map = new google.maps.Map(document.getElementById('map'), {
            center: center,
            zoom: 12
        });
        var marker = new google.maps.Marker({
            map: map,
            position: center
        });
    }

    function renderMap(value) {
        // Get the user defined values, radius and selected value
        radius = radius * 1000;
        selectedTypes = [];
        selectedTypes.push(value);

        var center = new google.maps.LatLng(@latitude, @longitude);

        map = new google.maps.Map(document.getElementById('map'), {
            center: center,
            zoom: 15
        });
        var marker = new google.maps.Marker({
            map: map,
            position: center
        });

        //create a nearby places request with user defined values as parameters
        var request = {
            location: center,
            radius: radius,
            types: selectedTypes
        };
        //clear the selected types
        selectedTypes = [];
        infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);
        //call the nearbySearch function
        service.nearbySearch(request, callback);
    }


    function callback(results, status) {
        //if the results were retrieved
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            //get the location element
            var location = document.getElementById('location');
            //empty the arrays
            var tripInstructions = [];
            destination = [];
            latitude = [];
            longitude = [];
            //for each element in the result
            for (var i = 0; i < results.length; i++) {
                //push the name and address values to the destination array
                destination.push(results[i].name + ',' + results[i].vicinity);

                //push the coordinate values to the lat, longitude array
                latitude.push(results[i].geometry.location.lat());
                longitude.push(results[i].geometry.location.lng());
                //create markers for each result
                createMarker(results[i], i);
                var placename = results[i].name;
                var placeaddress = results[i].vicinity;
                //construct table row elements
                tripInstructions.push('<tr id = "place' + i + '"><td>' + placename + '</td><td>' + placeaddress +
                    '</td><td><a id="' + i + '" class= "btn btn-primary" onclick="newPlan(this)"> Add To Plan</a ></td ></tr > ');
                //include the table row elements to the main table
                location.innerHTML = tripInstructions.join("");
            }
        }

    }

    //Add to plan function
    function newPlan(element) {
        //on new request, disable the pointer events
        document.body.style.pointerEvents = 'none';
        document.body.style.cursor = 'wait';
        var to = destination[element.id];
        var from = "@startLocation";
        var jdate = "@Date";
        var jtime = "@Time";
        var lat = latitude[element.id];
        var lng = longitude[element.id];

        //create an ajax request to the server to add new plan
            $.ajax({
                url: 'NewPlan',
                data: { 'plandate': jdate, 'time': jtime, 'lat': lat, 'lon': lng, 'fromlocation': from, 'location': to },
                type: "post",
                cache: false,
                success: function (data) {
                    //on success notify the user and enable pointer Events back to auto
                    $.notify("Added " + to + " to your plan successfully", "success", { position: "top-center" });
                    document.body.style.pointerEvents = 'auto';
                },
                error: function () {
                    //display error message if failed
                    $.notify("error! The location was not added to your plan");
                }
            });
    }

    // create markers for each place based on their type ID
    function createMarker(place, id) {
        var placeId = "place" + id;
        var marker = new google.maps.Marker({
            map: map,
            position: place.geometry.location,
            icon: {
                url: "/images/icon0"+ typeid +".png",
                scaledSize: new google.maps.Size(30, 30) // pixel
            },
            animation: google.maps.Animation.DROP
        });

        //add click listener to the markers
        google.maps.event.addListener(marker, 'click', function () {
            //initialise the contents of the infowindow on click
            infowindow.setContent(place.name + '<br>' + place.vicinity);
            infowindow.open(map, this);
            //speak the contents of the location clicked
            doTTS(id);
            //if the screen size is mobile scroll to the row element as top
            if (screen.width <= 1280) {
                $('html, body').animate({
                    scrollTop: $("#" + placeId).offset().top
                }, 'slow');
            }
            //else give an offset of 10 
            else {
                var topPos = document.getElementById(placeId).offsetTop;
                $('#tablecontainer').animate({
                    scrollTop: topPos - 10,
                }, 'slow');
            }

        });

        //infowindow content_change event listener to stop speech and remove highlight
        google.maps.event.addListener(infowindow, 'content_changed', function () {
            document.getElementById(placeId).style.backgroundColor = "transparent";
            speechSynthesis.cancel();
        });

        //infowindow close button click listener to stop speech and remove highlight
        google.maps.event.addListener(infowindow, 'closeclick', function () {
            document.getElementById(placeId).style.backgroundColor = "transparent";
            speechSynthesis.cancel();
        });
    }

    function doTTS(eid) {
        //initialise the speech synthesis
        var synth = window.speechSynthesis;
        //cancel all previous speech
        synth.cancel();
        var placeId = "place" + eid;
        var to = destination[eid];
         //construct the text to be spoken
        var text = to;
        const utterance = new SpeechSynthesisUtterance(text);
        //configure the utterance pitch, volume and rate
        utterance.pitch = 1.5;
        utterance.volume = 1.5;
        utterance.rate = 1;
        //speak the utterance
        synth.speak(utterance);
        //on utterance start, highlight the div element being spoken
        utterance.onstart = function (event) {
            document.getElementById(placeId).style.backgroundColor = "#FDFF47";
        };
    }


</script>
<body onload="initialize(); changeFunc();" style="font-size:20px;">
    <div class="page-header">
        <div class="container">
            <div class="breadcrumbs">
                <ul class="list-unstyled">
                    <li>
                        <a href="/">Home</a>
                    </li>
                    <li>
                        <a href=@Url.Action(controllerName: "UserPlans",actionName: "PlanCreator", routeValues: new { date = Date})>My Plans</a>
                    </li>
                    <li>
                        <a href=@Url.Action(controllerName: "UserPlans",actionName: "PlanCreator", routeValues: new { date = Date})>@displayDate</a>
                    </li>
                    <li>
                        Explore Nearby
                    </li>
                </ul>
            </div> <!-- end .breadcrumbs -->
        </div> <!-- end .container -->
    </div>
    <div class="frame">
        <div class="zoom">
            <h3 style="font-size:26px"><b>Explore places near @nearlocation</b></h3>
        </div>
    </div>
    <div class="fullscreen-section">
        <div class="left">
            <div id="map" style="width:100%; height:694px;"></div>
        </div> <!-- end .left -->
        <div class="right">
            <br />
            <div class="directory-filters">
                <form name="frm_map" id="frm_map">
                    <div class="row small" style="text-align:left">
                        <div class="col-md-4 col-md-offset-1">
                            <div class="select-info small">
                                <div class="frame">
                                    <div class="zoom"><p style="font-size:20px"><b>Select category</b></p></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-md-offset-1">
                            <div class="select-info small">
                                <div class="frame">
                                    <div class="zoom"><p style="font-size:20px"><b>Select distance</b></p></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row small">
                        <div class="col-md-4 col-md-offset-1">
                            <div class="form-group ">
                                <select id="typeholder" onchange="changeFunc();">
                                    <option value="church">Church</option>
                                    <option value="cafe">Cafe</option>
                                    <option value="park">Sports</option>
                                    <option value="museum">Museum</option>
                                    <option value="train_station">Transport</option>
                                    <option value="shopping_mall">Shopping mall</option>
                                </select>
                            </div> <!-- end .form-group -->
                        </div> <!-- end .col-sm-4 -->
                        <div class="col-md-4 col-md-offset-1">
                            <div class="form-group">
                                <select id="radius" onchange="changeFunc();">
                                    <option value="1">1km</option>
                                    <option value="2">2km</option>
                                    <option value="3">3km</option>
                                </select>
                            </div> <!-- end .form-group -->
                        </div> <!-- end .col-sm-4 -->
                    </div> <!-- end .row -->
                </form>
            </div> <!-- end .directory-filters -->
            <div id="tablecontainer" class="inner" style="overflow-y:scroll">
                <div class="directory-list row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>
                                    @Html.Label("Name")
                                </th>
                                <th>
                                    @Html.Label("Address")
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="location"></tbody>
                    </table>

                </div> <!-- end .directory-list -->
            </div> <!-- end .inner -->
        </div> <!-- end .right -->
    </div> <!-- end .section -->
    <br />


</body>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



